#version 460

#extension GL_EXT_ray_query : enable
#extension GL_KHR_vulkan_glsl : enable

#define PI 3.14159265358979323846

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform writeonly image2D img;
layout(set = 0, binding = 1) uniform sampler2D depthTex;
layout(set = 0, binding = 2) uniform sampler2D albedoMetallicTex;
layout(set = 0, binding = 3) uniform sampler2D normalRoughnessTex;

layout(set = 0, binding = 4, std140) uniform LightingUniforms
{
    mat4 invViewProj;
    vec3 viewPos;
    uint pad;
    vec2 invRes;
};

layout(set = 0, binding = 5) uniform sampler2D emissiveTex;
layout(set = 0, binding = 6) uniform sampler2D envMap;
layout(set = 0, binding = 7) uniform accelerationStructureEXT accStruct;

// below functions are from https://google.github.io/filament/Filament.html
float D_GGX(float NoH, float a) 
{
    float a2 = a * a;
    float f = (NoH * a2 - NoH) * NoH + 1.0;
    return a2 / (PI * f * f);
}

vec3 F_Schlick(float u, vec3 f0) 
{
    return f0 + (vec3(1.0) - f0) * pow(1.0 - u, 5.0);
}

float V_SmithGGXCorrelated(float NoV, float NoL, float a) 
{
    float a2 = a * a;
    float GGXL = NoV * sqrt((-NoL * a2 + NoL) * NoL + a2);
    float GGXV = NoL * sqrt((-NoV * a2 + NoV) * NoV + a2);
    return 0.5 / (GGXV + GGXL);
}

// from https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
vec3 ImportanceSampleGGX(vec2 Xi, float Roughness, vec3 N )
{
    float a = max(Roughness * Roughness, 0.001);
    float Phi = 2 * PI * Xi.x;
    float CosTheta = sqrt( max((1 - Xi.y) / ( 1 + (a*a - 1) * Xi.y ), 0.0) );
    float SinTheta = sqrt( max(1 - CosTheta * CosTheta, 0.0) );
    vec3 H;
    H.x = SinTheta * cos( Phi );
    H.y = SinTheta * sin( Phi );
    H.z = CosTheta;
    vec3 UpVector = abs(N.z) < 0.999 ? vec3(0.0,0.0,1.0) : vec3(1.0,0.0,0.0);
    vec3 TangentX = normalize( cross( UpVector, N ) );
    vec3 TangentY = cross( N, TangentX );
    // Tangent to world space
    return TangentX * H.x + TangentY * H.y + N * H.z;
}

// from https://nvpro-samples.github.io/vk_mini_path_tracer/index.html
uint stepRNG(uint rngState)
{
    return rngState * 747796405 + 1;
}

float stepAndOutputRNGFloat(inout uint rngState)
{
    // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
    rngState  = stepRNG(rngState);
    uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
    word      = (word >> 22) ^ word;
    return float(word) / 4294967295.0f;
}

void main()
{
    float depth = texelFetch(depthTex, ivec2(gl_GlobalInvocationID.xy), 0).x;
    vec3 albedo = texelFetch(albedoMetallicTex, ivec2(gl_GlobalInvocationID.xy), 0).rgb;
    vec3 normal = texelFetch(normalRoughnessTex, ivec2(gl_GlobalInvocationID.xy), 0).xyz * 2.0 - 1.0;
    float metallic = texelFetch(albedoMetallicTex, ivec2(gl_GlobalInvocationID.xy), 0).a;
    float roughness = texelFetch(normalRoughnessTex, ivec2(gl_GlobalInvocationID.xy), 0).a;
    
    vec2 uv = (gl_GlobalInvocationID.xy + 0.5) * invRes;
    vec4 clip = vec4(uv * 2.0 - 1.0, depth, 1.0);
    vec4 worldPos = invViewProj * clip;
    worldPos /= worldPos.w;

    vec3 viewDir = normalize(worldPos.xyz - viewPos);
    if (depth == 1.0)
    {
        imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(0.0), 1.0));
        return;
    }

    uint rngState = gl_GlobalInvocationID.y * uint(1.0 / invRes.x) + gl_GlobalInvocationID.x;
    vec3 sum = vec3(0.0);
    for (int i = 0; i < 1024; i++)
    {
        // specular

        vec2 rnd = vec2(stepAndOutputRNGFloat(rngState), stepAndOutputRNGFloat(rngState));
        vec3 sampleDir = ImportanceSampleGGX(rnd, roughness, normal);

        rayQueryEXT rayQuery;
        rayQueryInitializeEXT(rayQuery, accStruct, gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, worldPos.xyz, 0.001, sampleDir, 1000.0);
        rayQueryProceedEXT(rayQuery);

        float visible = 0.0;
        if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionNoneEXT)
            visible = 1.0;

        float theta = acos(sampleDir.z);
        float phi = atan(sampleDir.y / sampleDir.x) + PI;
        vec3 env = texture(envMap, vec2(2.0 * PI / phi, PI / theta)).rgb;

        vec3 h = normalize(sampleDir - viewDir);
        float nDotV = clamp(dot(normal, -viewDir), 0.0, 1.0);
        float nDotL = clamp(dot(normal, sampleDir), 0.0, 1.0);
        float nDotH = clamp(dot(normal, h), 0.0, 1.0);
        float lDotH = clamp(dot(sampleDir, h), 0.0, 1.0);

        vec3 f0 = 0.04 * (1.0 - metallic) + albedo * metallic;

        roughness = max(roughness * roughness, 0.001);
        float D = D_GGX(nDotH, roughness);
        vec3 F = F_Schlick(lDotH, f0);
        float G = V_SmithGGXCorrelated(nDotV, nDotL, roughness);

        vec3 specular = F * G * clamp(dot(normal, sampleDir), 0.0, 1.0) * env * visible;
        specular /= nDotH / (4.0 * lDotH);

        // diffuse
        rnd = vec2(stepAndOutputRNGFloat(rngState), stepAndOutputRNGFloat(rngState));
        sampleDir = ImportanceSampleGGX(rnd, 1.0, normal);

        rayQueryInitializeEXT(rayQuery, accStruct, gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, worldPos.xyz, 0.001, sampleDir, 1000.0);
        rayQueryProceedEXT(rayQuery);

        visible = 0.0;
        if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionNoneEXT)
            visible = 1.0;

        theta = acos(sampleDir.z);
        phi = atan(sampleDir.y / sampleDir.x) + PI;
        env = texture(envMap, vec2(2.0 * PI / phi, PI / theta)).rgb;
        vec3 diffuse = (1.0 - metallic) * albedo * env * visible;

        vec3 col = diffuse + specular + texelFetch(emissiveTex, ivec2(gl_GlobalInvocationID.xy), 0).rgb;
        sum += col;
    }
    sum /= 1024.0;

    // tonemap
    sum /= (1.0 + sum);
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(sum, 1.0));
}